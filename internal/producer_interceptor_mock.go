// Code generated by MockGen. DO NOT EDIT.
// Source: producer_interceptor.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducerInterceptor is a mock of ProducerInterceptor interface.
type MockProducerInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockProducerInterceptorMockRecorder
}

// MockProducerInterceptorMockRecorder is the mock recorder for MockProducerInterceptor.
type MockProducerInterceptorMockRecorder struct {
	mock *MockProducerInterceptor
}

// NewMockProducerInterceptor creates a new mock instance.
func NewMockProducerInterceptor(ctrl *gomock.Controller) *MockProducerInterceptor {
	mock := &MockProducerInterceptor{ctrl: ctrl}
	mock.recorder = &MockProducerInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerInterceptor) EXPECT() *MockProducerInterceptorMockRecorder {
	return m.recorder
}

// OnProduce mocks base method.
func (m *MockProducerInterceptor) OnProduce(ctx context.Context, message *ProducerMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnProduce", ctx, message)
}

// OnProduce indicates an expected call of OnProduce.
func (mr *MockProducerInterceptorMockRecorder) OnProduce(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnProduce", reflect.TypeOf((*MockProducerInterceptor)(nil).OnProduce), ctx, message)
}
