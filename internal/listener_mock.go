// Code generated by MockGen. DO NOT EDIT.
// Source: listener.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageVirtualListener is a mock of MessageVirtualListener interface.
type MockMessageVirtualListener struct {
	ctrl     *gomock.Controller
	recorder *MockMessageVirtualListenerMockRecorder
}

// MockMessageVirtualListenerMockRecorder is the mock recorder for MockMessageVirtualListener.
type MockMessageVirtualListenerMockRecorder struct {
	mock *MockMessageVirtualListener
}

// NewMockMessageVirtualListener creates a new mock instance.
func NewMockMessageVirtualListener(ctrl *gomock.Controller) *MockMessageVirtualListener {
	mock := &MockMessageVirtualListener{ctrl: ctrl}
	mock.recorder = &MockMessageVirtualListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageVirtualListener) EXPECT() *MockMessageVirtualListenerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageVirtualListener) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMessageVirtualListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageVirtualListener)(nil).Close))
}

// Publish mocks base method.
func (m *MockMessageVirtualListener) Publish(arg0 *ConsumerMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockMessageVirtualListenerMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessageVirtualListener)(nil).Publish), arg0)
}
