// Code generated by MockGen. DO NOT EDIT.
// Source: consumer_batch.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBatchConsumer is a mock of BatchConsumer interface.
type MockBatchConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockBatchConsumerMockRecorder
}

// MockBatchConsumerMockRecorder is the mock recorder for MockBatchConsumer.
type MockBatchConsumerMockRecorder struct {
	mock *MockBatchConsumer
}

// NewMockBatchConsumer creates a new mock instance.
func NewMockBatchConsumer(ctrl *gomock.Controller) *MockBatchConsumer {
	mock := &MockBatchConsumer{ctrl: ctrl}
	mock.recorder = &MockBatchConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchConsumer) EXPECT() *MockBatchConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockBatchConsumer) Consume(ctx context.Context, messages []*ConsumerMessage) map[*ConsumerMessage]error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, messages)
	ret0, _ := ret[0].(map[*ConsumerMessage]error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockBatchConsumerMockRecorder) Consume(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockBatchConsumer)(nil).Consume), ctx, messages)
}
