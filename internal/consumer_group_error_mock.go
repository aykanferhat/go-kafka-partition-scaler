// Code generated by MockGen. DO NOT EDIT.
// Source: consumer_group_error.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockErrorConsumerGroup is a mock of ErrorConsumerGroup interface.
type MockErrorConsumerGroup struct {
	ctrl     *gomock.Controller
	recorder *MockErrorConsumerGroupMockRecorder
}

// MockErrorConsumerGroupMockRecorder is the mock recorder for MockErrorConsumerGroup.
type MockErrorConsumerGroupMockRecorder struct {
	mock *MockErrorConsumerGroup
}

// NewMockErrorConsumerGroup creates a new mock instance.
func NewMockErrorConsumerGroup(ctrl *gomock.Controller) *MockErrorConsumerGroup {
	mock := &MockErrorConsumerGroup{ctrl: ctrl}
	mock.recorder = &MockErrorConsumerGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorConsumerGroup) EXPECT() *MockErrorConsumerGroupMockRecorder {
	return m.recorder
}

// GetGroupID mocks base method.
func (m *MockErrorConsumerGroup) GetGroupID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGroupID indicates an expected call of GetGroupID.
func (mr *MockErrorConsumerGroupMockRecorder) GetGroupID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupID", reflect.TypeOf((*MockErrorConsumerGroup)(nil).GetGroupID))
}

// IsRunning mocks base method.
func (m *MockErrorConsumerGroup) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockErrorConsumerGroupMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockErrorConsumerGroup)(nil).IsRunning))
}

// ScheduleToSubscribe mocks base method.
func (m *MockErrorConsumerGroup) ScheduleToSubscribe(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleToSubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleToSubscribe indicates an expected call of ScheduleToSubscribe.
func (mr *MockErrorConsumerGroupMockRecorder) ScheduleToSubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleToSubscribe", reflect.TypeOf((*MockErrorConsumerGroup)(nil).ScheduleToSubscribe), arg0)
}

// Subscribe mocks base method.
func (m *MockErrorConsumerGroup) Subscribe(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockErrorConsumerGroupMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockErrorConsumerGroup)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockErrorConsumerGroup) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockErrorConsumerGroupMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockErrorConsumerGroup)(nil).Unsubscribe))
}

// WaitConsumerStart mocks base method.
func (m *MockErrorConsumerGroup) WaitConsumerStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitConsumerStart")
}

// WaitConsumerStart indicates an expected call of WaitConsumerStart.
func (mr *MockErrorConsumerGroupMockRecorder) WaitConsumerStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitConsumerStart", reflect.TypeOf((*MockErrorConsumerGroup)(nil).WaitConsumerStart))
}

// WaitConsumerStop mocks base method.
func (m *MockErrorConsumerGroup) WaitConsumerStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitConsumerStop")
}

// WaitConsumerStop indicates an expected call of WaitConsumerStop.
func (mr *MockErrorConsumerGroupMockRecorder) WaitConsumerStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitConsumerStop", reflect.TypeOf((*MockErrorConsumerGroup)(nil).WaitConsumerStop))
}
